Exercise 1.2: Data Types in Python
Reflection Questions
• Imagine you’re having a conversation with a future colleague about whether to use the
iPython Shell instead of Python’s default shell. What reasons would you give to explain the
benefits of using the iPython Shell over the default one?

I think that using iPython has a lot of benefits like its interactive environment, syntax
highlighting, tab completion, and inline help that can show where there are problems in your
code. It can also render images and data structures. It also has better error reporting features
than Python’s default shell.

• Python has a host of different data types that allow you to store and organize
information. List 4 examples of data types that Python recognizes, briefly define them, and
indicate whether they are scalar or non-scalar.

DataType, Definition, Scalar or Non-Scalar?
int An integer is a whole number Scalar
float A float is number with a decimal point Scalar
str A string of characters (numbers or letters) Scalar
list An ordered, mutable collection of items that can
hold different data types wrapped in []
Non-Scalar

• A frequent question at job interviews for Python developers is: what is the difference
between lists and tuples in Python? Write down how you would respond.

Lists and tuples differ in regards to mutability. Tuples are immutable and lists are mutable, which
makes tuples unmodifiable. Lists are used for collections of data that can be updated.

• In the task for this Exercise, you decided what you thought was the most suitable data
structure for storing all the information for a recipe. Now, imagine you’re creating a
language-learning app that helps users memorize vocabulary through flashcards. Users can
input vocabulary words, definitions, and their category (noun, verb, etc.) into the flashcards.

They can then quiz themselves by flipping through the flashcards. Think about the necessary
data types and what would be the most suitable data structure for this language-learning app.
Between tuples, lists, and dictionaries, which would you choose? Think about their respective
advantages and limitations, and where flexibility might be useful if you were to continue
developing the language-learning app beyond vocabulary memorization.

For the flashcards, I would use dictionaries as they are flexible and mutable and the flashcards
could be updated as needed. They can have keys on the flashcards for words, definitions, and
categories.
The flashcards can be stored in a list that can be updated as needed.